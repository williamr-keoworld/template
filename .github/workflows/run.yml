name: "run"

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Environment to deploy:"
        options:
          - DEV
          - QA
          - STG
          - PRO
        required: true
      applying:
        type: choice
        description: "Do you want to apply?:"
        options:
          - "NO"
          - "YES"
        default: "NO"
        required: true
      confirm_apply:
        description: "Confirm the apply typing YES"
        default: "NO"
        required: true

env:
  BUCKET_BACKEND: ${{ format('terraform-for-remote-state-{0}', github.event.inputs.environment) }}
  PROJECT_NAME: "workeo-mex"
  THE_WORKSPACE: ${{ github.event.inputs.environment }}
  THE_SA: ${{ secrets[format('SERVICE_ACCOUNT_{0}', github.event.inputs.environment)] }}
  THE_WIP: ${{ secrets[format('WORKLOAD_IDENTITY_PROVIDER_{0}', github.event.inputs.environment)] }}
  APPLY: ${{ github.event.inputs.applying }}
  CONFIRMATION: ${{ github.event.inputs.confirm_apply }}

jobs:
  terraform:
    permissions:
      contents: "read"
      id-token: "write"
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - id: toLowerCase
        run: echo "lowerCaseValue=$(echo "${{ env.BUCKET_BACKEND }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # GCP authentication setup
      - name: Authenticate to Google Cloud
        uses: "google-github-actions/auth@v1.0.0"
        with:
          token_format: "access_token"
          service_account: ${{ env.THE_SA }}
          workload_identity_provider: ${{ env.THE_WIP }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          git config --global url."https://oauth2:${{ secrets.GIT_ACCESS_TOKEN }}@github.com".insteadOf https://github.com
          echo 'bucket="${{ steps.toLowerCase.outputs.lowerCaseValue }}"' > config.tfbackend
          echo 'prefix="${{ env.PROJECT_NAME }}"' >> config.tfbackend
          cat config.tfbackend
          terraform init -backend-config=config.tfbackend

      # Checks that all Terraform configuration files adhere to a canonical format
      # - name: Terraform Format
      # run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          terraform workspace select ${{ env.THE_WORKSPACE }}
          terraform plan -input=false

      - name: Apply
        if: ${{ env.APPLY== 'YES' && env.CONFIRMATION == 'YES' }}
        run: |
          terraform workspace select ${{ env.THE_WORKSPACE }}
          terraform apply -auto-approve -input=false
