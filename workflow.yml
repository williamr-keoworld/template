name: 'Terraform plan'

on: workflow_dispatch

jobs:
  terraform:
    permissions:
      contents: 'read'
      id-token: 'write'
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: w

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      
    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v1.0.0'
      with:
        token_format: "access_token"
        workload_identity_provider: "projects/429058662415/locations/global/workloadIdentityPools/github-terraform-actions/providers/github"
        service_account: "terraform-editor@gc-k-gbl-access-control-dev.iam.gserviceaccount.com"
        
    # It is placed in the corresponding directory, create and establishes the workspace (environment).
    - name: Terraform pre
      run:  |
            # It is located in the project directory
            cd projects/workeo-mex
            # The workspaces are created
            terraform workspace new dev
            # terraform workspace new qa
            terraform workspace new stg
            terraform workspace new pro
            # The workspace (environment) is selected
            terraform workspace select dev
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config_$env=config.tfbackend
      
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #    run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Plan
      # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      # run: terraform apply -auto-approve -input=false
      run:  |
            cd projects/workeo-mex
            terraform plan